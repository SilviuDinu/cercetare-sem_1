{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["TextAreaForm","val","onChange","transform","value","placeholder","type","onClick","TextResult","this","props","readOnly","React","Component","App","useState","textToChange","setTextToChange","resultedText","setResultedText","className","event","target","Array","from","i","length","toLowerCase","toUpperCase","join","replace","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0PA6BA,IAAMA,EAAe,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,IAAKC,EAA0B,EAA1BA,SAAUC,EAAgB,EAAhBA,UACrC,OACE,qCACE,0BAAUC,MAAOH,EAAKC,SAAUA,EAAUG,YAAY,oBACtD,wBAAQC,KAAK,SAASC,QAAS,kBAAMJ,EAAUF,IAA/C,wBAKAO,E,uKAEF,OACEC,KAAKC,MAAMT,IAAM,uBAAOK,KAAK,OAAOK,UAAQ,EAACP,MAAOK,KAAKC,MAAMT,MAAU,S,GAHtDW,IAAMC,WAShBC,EA5Cf,SAAaJ,GAAQ,IAAD,EACsBK,mBAAS,IAD/B,mBACXC,EADW,KACGC,EADH,OAEsBF,mBAAS,IAF/B,mBAEXG,EAFW,KAEGC,EAFH,KAelB,OACE,qBAAKC,UAAU,MAAf,SACE,gCACE,sCACA,cAAC,EAAD,CAAcnB,IAAKe,EAAcd,SAhBpB,SAACmB,GAClBJ,EAAgBI,EAAMC,OAAOlB,QAe8BD,UAb3C,SAACF,GAEjB,IADA,IAAMG,EAAQmB,MAAMC,KAAKvB,GAChBwB,EAAI,EAAGA,EAAIrB,EAAMsB,OAAQD,IACfrB,EAAMqB,GAAnBA,EAAI,IAAM,EAAcrB,EAAMqB,GAAGE,cACrBvB,EAAMqB,GAAGG,cAE3BX,EAAgB,IAChBE,EAAgBf,EAAMyB,OAAOC,QAAQ,KAAM,QAOvC,cAAC,EAAD,CAAY7B,IAAKiB,UCXVa,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.0a4e59ef.chunk.js","sourcesContent":["import './App.css';\nimport React, { useState } from 'react';\n\nfunction App(props) {\n  const [textToChange, setTextToChange] = useState('');\n  const [resultedText, setResultedText] = useState('');\n  const updateText = (event) => {\n    setTextToChange(event.target.value)\n  }\n  const parseText = (val) => {\n    const value = Array.from(val);\n    for (var i = 0; i < value.length; i++) {\n      if (i % 2 === 0) value[i] = value[i].toLowerCase();\n      else value[i] = value[i].toUpperCase();\n    }\n    setTextToChange('');\n    setResultedText(value.join().replace(/,/g, ''));\n  }\n  return (\n    <div className=\"App\">\n      <div>\n        <h1>Cucu</h1>\n        <TextAreaForm val={textToChange} onChange={updateText} transform={parseText} />\n        <TextResult val={resultedText} />\n      </div>\n    </div>\n  );\n}\n\nconst TextAreaForm = ({ val, onChange, transform }) => {\n  return (\n    <>\n      <textarea value={val} onChange={onChange} placeholder=\"Write something\"></textarea>\n      <button type=\"submit\" onClick={() => transform(val)}>Change</button>\n    </>\n  )\n};\n\nclass TextResult extends React.Component {\n  render() {\n    return (\n      this.props.val ? <input type=\"text\" readOnly value={this.props.val} /> : null\n    )\n  }\n}\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}